//
//  JSONObjectToObjCModelAppDelegate.m
//  JSONObjectToObjCModel
//
//  Created by akshay on 4/14/12.
//  Copyright 2012 raw engineering, inc. www.raweng.com. All rights reserved.
//

#import "JSONObjectToObjCModelAppDelegate.h"
#import "JSON.h"
#define CLASSNAME @"yourFileNameHere" //e.g. UserModel





static BOOL IS_ARC = YES;


@implementation JSONObjectToObjCModelAppDelegate

@synthesize window;


#pragma mark -
#pragma mark Application lifecycle

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {    
    
    // Override point for customization after application launch.
    [self.window makeKeyAndVisible];
    

	NSDictionary* dict = [[NSDictionary alloc]initWithDictionary:[[NSString stringWithContentsOfFile:[[NSBundle mainBundle] pathForResource:@"json" ofType:@"json" inDirectory:@"json"] encoding:NSUTF8StringEncoding error:nil] JSONValue]];
	
	NSString* contentForInterfaceFile = [[NSString alloc]init];
    
    contentForInterfaceFile = [contentForInterfaceFile stringByAppendingString:[NSString stringWithFormat:@"//\n//  %@.h\n//  Generated by JSON to ObjC model mapping\n//  raw engineering 2012 www.raweng.com\n//\n\n",CLASSNAME]];
	
	contentForInterfaceFile = [contentForInterfaceFile stringByAppendingString:@"#import <Foundation/Foundation.h>\n"];

//	contentForInterfaceFile = [contentForInterfaceFile stringByAppendingString:[NSString stringWithFormat:@"\n@class %@;\n",CLASSNAME]];

	contentForInterfaceFile = [contentForInterfaceFile stringByAppendingString:[NSString stringWithFormat:@"\n@interface %@ : NSObject {\n",CLASSNAME]];

	NSString* classVariables = [[NSString alloc]init];
	NSString* properties = [[NSString alloc]init];
	NSString* synthesize = [[NSString alloc]init];
    NSString* release = [[NSString alloc]init];
    NSString * assigningProperties = [[NSString alloc]init];
    NSString* dictName = [NSString stringWithFormat:@"%@Dictionary",CLASSNAME];
	NSString* memberFunction = [NSString stringWithFormat:@"-(id)initWith%@Dictionary:(NSDictionary*)%@",CLASSNAME,dictName];
    
	for (NSObject* key in [dict allKeys]) {
		classVariables = [classVariables stringByAppendingString:[NSString stringWithFormat:@"\tNSString* %@;\n",key]];
		properties = [properties stringByAppendingString:[NSString stringWithFormat:@"@property (nonatomic, retain) NSString* %@;\n",key]];
		synthesize = [synthesize stringByAppendingString:[NSString stringWithFormat:@"@synthesize %@;\n",key]];
        if (!IS_ARC) {
            release = [release stringByAppendingString:[NSString stringWithFormat:@"\t[%@ release];\n",key]];
        }
        
        assigningProperties = [assigningProperties 
                               stringByAppendingString:[NSString stringWithFormat:@"\t\tif ([%@ objectForKey:@\"%@\"] && ![[%@ objectForKey:@\"%@\"] isKindOfClass:[NSNull class]]) {",dictName,key,dictName,key]];
        
		assigningProperties = [assigningProperties 
                               stringByAppendingString:[NSString stringWithFormat:@"\n\t\t\tself.%@ = [%@ objectForKey:@\"%@\"];\n",key,dictName,key]];
		assigningProperties = [assigningProperties 
                               stringByAppendingString:[NSString stringWithFormat:@"\t\t}\n"]];
//		contentForInterfaceFile = [contentForInterfaceFile stringByAppendingString:[NSString stringWithFormat:@"\tNSString* %@;\n",key]];
	}
	
	contentForInterfaceFile = [contentForInterfaceFile stringByAppendingString:classVariables];
	contentForInterfaceFile = [contentForInterfaceFile stringByAppendingString:@"}\n\n"];
	contentForInterfaceFile = [contentForInterfaceFile stringByAppendingString:properties];
	
	contentForInterfaceFile = [contentForInterfaceFile stringByAppendingString:@"\n"];
	
	contentForInterfaceFile = [contentForInterfaceFile stringByAppendingString:[NSString stringWithFormat:@"%@;\n",memberFunction]];
	contentForInterfaceFile = [contentForInterfaceFile stringByAppendingString:[NSString stringWithFormat:@"\n@end"]];
	
	NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
	NSString *documentsDirectory = [paths objectAtIndex:0];
	NSString *interfaceFileName = [NSString stringWithFormat:@"%@/%@.h", 
						  documentsDirectory,CLASSNAME];

    //save content to the documents directory
    [contentForInterfaceFile writeToFile:interfaceFileName 
			  atomically:NO 
				encoding:NSStringEncodingConversionAllowLossy 
				   error:nil];
	
	NSString* contentForImplementationFile = [[NSString alloc]init];
	
    contentForImplementationFile = [contentForImplementationFile stringByAppendingString:[NSString stringWithFormat:@"//\n//  %@.m\n//  Generated by JSON to ObjC model mapping\n//  raw engineering 2012 www.raweng.com\n//\n\n",CLASSNAME]];
    
	contentForImplementationFile = [contentForImplementationFile 
									stringByAppendingString:[NSString stringWithFormat:@"#import \"%@.h\"\n",CLASSNAME]];
	
	contentForImplementationFile = [contentForImplementationFile 
									stringByAppendingString:[NSString stringWithFormat:@"\n@implementation %@\n",CLASSNAME]];
	
	contentForImplementationFile = [contentForImplementationFile 
									stringByAppendingString:[NSString stringWithFormat:@"\n%@",synthesize]];
	
	contentForImplementationFile = [contentForImplementationFile 
									stringByAppendingString:[NSString stringWithFormat:@"\n%@ {",memberFunction]];

	contentForImplementationFile = [contentForImplementationFile 
									stringByAppendingString:[NSString stringWithFormat:@"\n\tif (self = [super init]) {\n"]];
    
    contentForImplementationFile = [contentForImplementationFile stringByAppendingString:assigningProperties];
	
	contentForImplementationFile = [contentForImplementationFile 
									stringByAppendingString:[NSString stringWithFormat:@"\t}\n"]];


	contentForImplementationFile = [contentForImplementationFile 
									stringByAppendingString:[NSString stringWithFormat:@"\treturn self;\n}\n"]];
	
    if (!IS_ARC) {
        contentForImplementationFile = [contentForImplementationFile 
                                        stringByAppendingString:[NSString stringWithFormat:@"\n\n-(void)dealloc{\n"]];
        contentForImplementationFile = [contentForImplementationFile 
                                        stringByAppendingString:[NSString stringWithFormat:@"%@",release]];
        contentForImplementationFile = [contentForImplementationFile 
                                        stringByAppendingString:[NSString stringWithFormat:@"}\n"]];
    }
    
	contentForImplementationFile = [contentForImplementationFile 
									stringByAppendingString:[NSString stringWithFormat:@"\n@end"]];

	NSString *implementationFileName = [NSString stringWithFormat:@"%@/%@.m", 
								   documentsDirectory,CLASSNAME];
	NSLog(@"Files generated at %@",implementationFileName);
    //save content to the documents directory
    [contentForImplementationFile writeToFile:implementationFileName 
							  atomically:NO 
								encoding:NSStringEncodingConversionAllowLossy 
								   error:nil];
	
	
    return YES;
}


- (void)applicationWillResignActive:(UIApplication *)application {
    /*
     Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state.
     Use this method to pause ongoing tasks, disable timers, and throttle down OpenGL ES frame rates. Games should use this method to pause the game.
     */
}


- (void)applicationDidEnterBackground:(UIApplication *)application {
    /*
     Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later. 
     If your application supports background execution, called instead of applicationWillTerminate: when the user quits.
     */
}


- (void)applicationWillEnterForeground:(UIApplication *)application {
    /*
     Called as part of  transition from the background to the inactive state: here you can undo many of the changes made on entering the background.
     */
}


- (void)applicationDidBecomeActive:(UIApplication *)application {
    /*
     Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface.
     */
}


- (void)applicationWillTerminate:(UIApplication *)application {
    /*
     Called when the application is about to terminate.
     See also applicationDidEnterBackground:.
     */
}


#pragma mark -
#pragma mark Memory management

- (void)applicationDidReceiveMemoryWarning:(UIApplication *)application {
    /*
     Free up as much memory as possible by purging cached data objects that can be recreated (or reloaded from disk) later.
     */
}


- (void)dealloc {
    [window release];
    [super dealloc];
}


@end
